heat_template_version: 2013-05-23

description: >
   A simple Heat template that creates a VM, hooks it up to a private network
   and associates a floating ip from an external network to the VM.

# Create command: heat stack-create <stack-name> --template-file=<path-to-this-file> --parameters="flavor_name=<flavor-name>;image_name=<image-name>;ext_net_id=<external network UUID>"

parameters:
  flavor_name:
    type: string
    label: flavor name
    description: Name of the flavor to be used for the instances.
  image_name:
    type: string
    label: image name
    description: Name of the image from which to create the instances.
  ext_net_id:
    type: string
    label: external network id
    description: ID of the external network to which the private network should be uplinked..

resources:
   lnet_1:
      type: OS::Neutron::Net
      properties:
         admin_state_up: true
         name: lnet_1

   subnet_1:
      type: OS::Neutron::Subnet
      properties:
         name: subnet_1
         cidr: 10.10.10.0/24
         enable_dhcp: true
         gateway_ip: 10.10.10.254
         network_id: { get_resource: lnet_1 }

   router_1:
      type: OS::Neutron::Router
      properties:
         admin_state_up: true
         name: router_1
   router_1_gw:
      type: OS::Neutron::RouterGateway
      properties:
         network_id: { get_param: ext_net_id }
         router_id: { get_resource: router_1 }
   router1_int1:
      type: OS::Neutron::RouterInterface
      properties:
         router_id: { get_resource: router_1 }
         subnet_id: { get_resource: subnet_1 }

   instance1_port1:
      type: OS::Neutron::Port
      properties:
         admin_state_up: true
         network_id: { get_resource: lnet_1 }
         security_groups:
            - default

   instance1:
      type: OS::Nova::Server
      properties:
         name: instance1
         image: { get_param: image_name }
         flavor:  { get_param: flavor_name }
         networks:
            - port: { get_resource: instance1_port1 }

   instance1_floating_ip:
      type: OS::Neutron::FloatingIP
      properties:
         floating_network_id: { get_param: ext_net_id }
         port_id: { get_resource: instance1_port1 }

outputs:
   instance1_private_ip:
      description: Fixed IP address of instance1 on the private network.
      value: { get_attr: [ instance1, first_address] }
   instance1_floating_ip:
      description: Floating IP address of instance1 on external network.
      value: { get_attr: [ instance1_floating_ip, floating_ip_address] }
